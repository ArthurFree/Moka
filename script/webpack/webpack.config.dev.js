const path = require('path');
const { merge } = require('webpack-merge');
const ReactRefreshWebpackPlugin = require('@pmmmwh/react-refresh-webpack-plugin');
const paths = require('../const/paths');
const { devServerProxyConfig } = require('./devServerProxy');
const common = require('./webpack.config.common');

module.exports = merge(common, {
    // output: {
    //     path: paths.dist,
    //     fliename: '[name].[fullhash].js',
    //     publicPath: '/',
    // },
    mode: 'development',
    devtool: 'inline-source-map',
    devServer: {
        open: true,
        compress: true,
        port: 8080,
        client: {
            overlay: false,
        },
        headers: {
            'Access-Control-Allow-Origin': '*'
        },
        historyApiFallback: true,
        hot: true,
        proxy: devServerProxyConfig,
        static: {
            directory: path.join(paths.rootDir, 'dist'),
            publicPath: '/',
        },
        /* historyApiFallback: true,
        open: true,
        compress: true,
        hot: true,
        port: 8080, */
    },
    module: {
        rules: [
            {
                test: /\.css$/,
                use: [
                    {
                        loader: 'style-loader',
                        options: {
                            esModule: false,
                        }
                    },
                    {
                        loader: 'css-loader',
                    },
                    {
                        loader: 'postcss-loader',
                        options: {
                            postcssOptions: {
                                config: path.join(__dirname, './postcss.js'),
                            },
                            sourceMap: true,
                        },
                    }
                ],
            },
            // sassModuleRule
            {
                test: /\.module\.s([ca])ss$/,
                use: [
                    // miniCssExtractLoader
                    {
                        loader: 'style-loader',
                        options: {
                            esModule: false,
                        },
                    },
                    // typingsCssModulesLoader
                    {
                        loader: '@teamsupercell/typings-for-css-modules-loader',
                        options: {
                            banner:
                                '// autogenerated by typings-for-css-modules-loader. \n// Please do not change this file!',
                            formatter: 'prettier',
                        },
                    },
                    // cssLoader
                    {
                        loader: 'css-loader',
                        options: {
                            esModule: false,
                            modules: {
                                exportLocalsConvention: 'camelCaseOnly',
                                localIdentName: '[local]__[contenthash:base64:5]',
                            },
                        }
                    },
                    // postCssLoader
                    {
                        loader: 'postcss-loader',
                        options: {
                            postcssOptions: {
                                config: path.join(__dirname, './postcss.js'),
                            },
                            sourceMap: true,
                        },
                    },
                    // TODO: 待研究
                    /* {
                        loader: 'resolve-url-loader',
                        options: {
                            sourceMap: true,
                        },
                    } */
                    // sassLoaderItems
                    {
                        loader: 'sass-loader',
                        options: {
                            sourceMap: true,
                            // Prefer `dart-sassRules`
                            implementation: require('sass'),
                        },
                    },
                    // TODO: sass-resources-loader 作用？
                ],
            },
            // sassRule
            {
                // test: /\.(sass|scss|css)$/,
                test: /\.s([ca])ss$/,
                use: [
                    {
                        loader: 'style-loader',
                        options: {
                            esModule: false,
                        },
                    },
                    {
                        loader: 'css-loader',
                        options: { sourceMap: true, importLoaders: 1, modules: false },
                    },
                    // postcss-loader 设置 autoprefix
                    {
                        loader: 'postcss-loader',
                        options: {
                            postcssOptions: {
                                config: path.join(__dirname, './postcss.js'),
                            },
                            sourceMap: true,
                        },
                    },
                    {
                        loader: 'sass-loader',
                        options: {
                            sourceMap: true,
                            // Prefer `dart-sassRules`
                            implementation: require('sass'),
                        },
                    },
                ],
            }
        ]
    },
    plugins: [
        new ReactRefreshWebpackPlugin()
    ]
});
